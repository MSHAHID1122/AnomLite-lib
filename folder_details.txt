README.md

Provides:

Project overview and motivation.

Installation steps (pip install, dev requirements).

Quickstart code snippets demonstrating a simple anomaly detection run.

Links to documentation, configuration guide, and contribution workflow.

setup.py & requirements.txt

setup.py: Defines package metadata (name, version, author) and entry points for console scripts.

requirements.txt: Pin versions of critical libraries (numpy, scipy, scikit-learn, pydicom, matplotlib) for reproducible installs.

.gitignore

Specifies patterns to exclude from Git (e.g., __pycache__/, .ipynb_checkpoints/, large raw data directories).

config/

Centralized configuration folder containing:

default.yaml: YAML file for default hyperparameters (PCA variance ratio, OCSVM ν, patch sizes), data paths, and output directories.

Users can override or extend these settings without modifying code.

data/

sample/: A handful of anonymized normal chest X-ray DICOM files for smoke testing and tutorials.

download_data.py: Automates downloading and organizing public datasets (e.g., MIMIC-CXR subsets) under structured folders (data/raw/, data/processed/).

notebooks/

Contains Jupyter notebooks for interactive exploration and quick prototyping:

01_pca_detection.ipynb: Walkthrough of PCA training and reconstruction error visualization.

02_ocsvm_detection.ipynb: Demonstration of feature extraction, One-Class SVM fitting, and anomaly scoring.

03_texture_patch_demo.ipynb: Examples of histogram/entropy comparisons and patch-based scoring with heatmap outputs.

chest_xray_anomaly/

Primary package directory with the following submodules:

base.py
Defines the abstract class AnomalyDetector with standardized methods:

fit(self, X_normal): Train on normal data.

score(self, X_test): Produce anomaly scores or maps for test data.

preprocessing/

dicom_loader.py: Functions to read DICOM files, extract pixel arrays, and handle metadata normalization.

image_transforms.py: Utilities for resizing, intensity normalization, histogram equalization.

patch_extractor.py: Logic for extracting fixed-size patches (e.g., 32×32) with optional overlap.

detectors/
Encapsulates each classical anomaly detection algorithm:

pca_detector.py: Fits PCA on flattened image vectors; computes reconstruction errors as anomaly scores.

ocsvm_detector.py: Implements One-Class SVM with RBF kernel on raw pixels or transformed features.

texture_detector.py: Compares global histograms or entropy measures against a baseline distribution.

patch_detector.py: Builds a library of normal patches; measures similarity (SSIM, Euclidean) for each test patch.

utils/

metrics.py: Functions to compute ROC AUC, precision-recall metrics, and threshold calibration strategies.

visualization.py: Routines to overlay anomaly heatmaps on original X-ray images and save visual outputs.

logger.py: Sets up a consistent logging format and log-level controls for debugging and audit trails.

examples/
Standalone Python scripts that demonstrate typical usage patterns for each detector:

run_pca.py: End-to-end example loading sample data, training PCA, scoring anomalies, and plotting results.

run_ocsvm.py: Similar workflow for One-Class SVM.

visualize_results.py: Utility to load saved score maps and generate comparative visualizations.

scripts/

Convenience shell scripts for development workflows:

test_all.sh: Runs the entire pytest suite and the notebooks (via nbconvert) to ensure examples remain functional.

lint.sh: Executes linters (flake8, isort) and optionally formatters (black) to enforce code style consistency.

tests/

Pytest-based unit tests covering:

DICOM Loader Tests: Verify that known DICOM samples load correctly into expected array shapes.

Detector Tests: Ensure each detector’s fit() and score() methods execute without errors and return properly shaped outputs.

Utility Tests: Check metric computations and visualization routines produce expected data structures.